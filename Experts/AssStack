
//+------------------------------------------------------------------+
//|                                                   AssStack.mq5   | 
//|                Displays SMA82 Indicator                          | 
//|              and generates buy/sell signals on SMA levels        | 
//|          Handles changes in symbol and timeframe automatically   | 
//+------------------------------------------------------------------+

#include <SymboleAssStack.mqh>

#property indicator_chart_window
#property indicator_buffers 2
#property indicator_plots 2

#property indicator_label1 "SMA82"
#property indicator_type1 DRAW_LINE
#property indicator_color1 clrBlue     // Color for the SMA line
#property indicator_width1 2

#property indicator_label2 "Safety Net"
#property indicator_type2 DRAW_LINE
#property indicator_color2 clrAqua     // Safety net line color
#property indicator_width2 2

// Indicator buffers
double SMA82Buffer[];
double SafetyNetBuffer[];               // Buffer for safety net values

// Indicator handle
int handleSMA82;

// Variables to track trade information
double lastBuyPrice = 0.0;              // Track last buy price
double takeProfitPrice = 0.0;           // Track take profit price
bool buyPositionLogged = false;          // Track if a buy position is logged
bool canOpenNewBuy = true;               // Flag to open new buy
double lastSMAValue = 0.0;               // Last value of SMA
bool takeProfitReached = false;          // Flag to indicate take profit has been reached
bool criteria  = false;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                           |
//+------------------------------------------------------------------+
int OnInit()
{
    handleSMA82 = iMA(Symbol(), 0, 82, 0, MODE_SMA, PRICE_CLOSE);

    if (handleSMA82 == INVALID_HANDLE)
    {
        Print("Failed to initialize SMA handle. Error code: ", GetLastError());
        return(INIT_FAILED);
    }
    

    SetIndexBuffer(0, SMA82Buffer);
    SetIndexBuffer(1, SafetyNetBuffer);  // Set the safety net buffer
    Print("SMA Indicator initialized.");
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                                | 
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total, const int prev_calculated,
                const datetime &time[], const double &open[], const double &high[],
                const double &low[], const double &close[], const long &tick_volume[],
                const long &volume[], const int &spread[])
{
    if (rates_total < 82)
    {
        Print("Not enough data. Total rates: ", rates_total);
        return 0;
    }

    // Copy SMA buffer
    if (CopyBuffer(handleSMA82, 0, 0, rates_total, SMA82Buffer) <= 0)
    {
        Print("Failed to copy SMA buffer. Error code: ", GetLastError());
        return 0;
    }

    // Calculate safety net values
    for (int i = 0; i < rates_total; i++)
    {
        SafetyNetBuffer[i] = SMA82Buffer[i] * 0.99;  // Adjust safety net value as needed
        Print("SMA82 Value: ", SMA82Buffer[i], ", Safety Net Value: ", SafetyNetBuffer[i]);
    }

    return rates_total;
}

// Define the structure for a Candlestick
struct Candlestick
{
    double open;
    double high;
    double low;
    double close;
    datetime time;
};


Candlestick candlesAfterCandleZeroArray[5];  
int candleCount = 0;

// Declare a variable to store the time when the bearish candle was detected
datetime bearishCandleTime = 0;  // Initialize to zero
bool isBearishCandleDetected = false;  // Flag to check if bearish candle is detected

// Function to check if a bearish candle's close is below the SMA
bool IsBearishOpenBelowSMA(double candleClose, double smaValue, datetime currentCandleTime)
{
    // Check if a bearish candle's close is below the SMA
    if (candleClose < smaValue)
    {
        if (!isBearishCandleDetected)
        {
            // First time detecting a bearish candle, store the time
            bearishCandleTime = currentCandleTime;
            isBearishCandleDetected = true;  // Set the flag
            Print("Bearish candle detected. Waiting for 5 minutes before re-evaluating.");
            return false;  // Don't block immediately, wait 5 minutes
        }
        else
        {
            // Check if 5 minutes have passed since the bearish candle was detected
            if (currentCandleTime >= bearishCandleTime + 3000)  // 5 minutes = 300 seconds
            {
                Print("5 minutes have passed since bearish candle detection. Evaluating conditions.");
                isBearishCandleDetected = false;  // Reset after evaluation
                return true;  // After 5 minutes, we can block the buy if still valid
            }
            else
            {
                Print("Still within 5 minutes wait period. Not evaluating yet.");
                return false;  // Still within the 5-minute window, do nothing
            }
        }
    }
    
    // Reset the bearish candle detection if conditions are not met
    isBearishCandleDetected = false;
    return false;
}

void OnTick()
{
    // Fetch the current and previous SMA values
    double smaValueCurrent = 0.0;
    double smaValuePrevious = 0.0;

    // Fetch the last two SMA values
    if (CopyBuffer(handleSMA82, 0, 0, 2, SMA82Buffer) <= 0)
    {
        Print("Failed to copy SMA buffer. Error code: ", GetLastError());
        return;
    }

    smaValueCurrent = SMA82Buffer[0];  // Current SMA value
    smaValuePrevious = SMA82Buffer[1];  // Previous SMA value

    double askPrice = SymbolInfoDouble(Symbol(), SYMBOL_ASK);
    double currentClosePrice = iClose(Symbol(), 0, 0);
    double currentOpenPrice = iOpen(Symbol(), 0, 0);
    double previousClosePrice = iClose(Symbol(), 0, 1);
    double currentLowPrice = iLow(Symbol(), 0, 0);
    double currentHighPrice = iHigh(Symbol(), 0, 0);
    datetime currentTime = iTime(Symbol(), 0, 0);  // Get current candle time

    // Check if there's an existing long position
    bool hasLongPosition = false;
    ulong positionTicket = 0;

    for (int i = 0; i < PositionsTotal(); i++)
    {
        if (PositionGetSymbol(i) == Symbol() && PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
        {
            hasLongPosition = true;
            positionTicket = PositionGetInteger(POSITION_TICKET);
            double currentBuyPrice = PositionGetDouble(POSITION_PRICE_OPEN);

            if (!buyPositionLogged || currentBuyPrice != lastBuyPrice)
            {
                lastBuyPrice = currentBuyPrice;
                takeProfitPrice = lastBuyPrice * 1.005;  // Adjust TP as needed
                Print("Active BUY position found. Last Buy Price: ", lastBuyPrice, ", Take Profit set at: ", takeProfitPrice);
                buyPositionLogged = true;
            }

            // Check if the take profit condition is met
            if (currentClosePrice >= takeProfitPrice)
            {
                ClosePosition(positionTicket); // Close the position
                takeProfitReached = true; // Set the take profit reached flag
                Print("Take Profit reached at: ", takeProfitPrice);
                buyPositionLogged = false; // Reset after take profit
            }
            break;
        }
    }

    // Reset if no position is found
    if (!hasLongPosition)
    {
        buyPositionLogged = false;
        canOpenNewBuy = true;  // Reset to allow opening new buys
        takeProfitReached = false; // Reset take profit flag
    }

    // Conditions to check for a bullish signal
    bool isBullishCandle = (currentClosePrice > currentOpenPrice);
    bool isBodyTouchesSMA = (currentLowPrice <= smaValueCurrent) && (currentHighPrice > smaValueCurrent);
    bool isBullishCrossover = (previousClosePrice < smaValuePrevious) && (currentClosePrice > smaValueCurrent);

    // Count candles after a significant bullish crossover
    static bool isCandleZeroFound = false;

    // Define a new variable to indicate counting state
    bool isCountingCandles = false;
    
    // Check for "Candle Zero" only if no open position exists and criteria met
    if (!hasLongPosition && !isCountingCandles && isBodyTouchesSMA && isBullishCrossover && isBullishCandle)
    {
        isCandleZeroFound = true;  // First bullish candle touching SMA
        candleCount = 0;  // Reset candle counter
        isCountingCandles = true; // Start counting candles after "Candle Zero"
        Print("Candle Zero found, starting to record candles after SMA crossover.");
    }

    // Logic for recording candles and opening buy position
    if (isCandleZeroFound)
    {
        // Track if any candle closed above the SMA
        bool anyCandleAboveSMA = false; // Flag to check if any candle has closed above SMA

        // Check if the current candle's close price is above the SMA
        if (currentClosePrice > smaValueCurrent)  
        {
            // Store candle data in the array
            if (candleCount < 5)  // Record up to 5 candles
            {
                candlesAfterCandleZeroArray[candleCount].open = currentOpenPrice;
                candlesAfterCandleZeroArray[candleCount].high = currentHighPrice;
                candlesAfterCandleZeroArray[candleCount].low = currentLowPrice;
                candlesAfterCandleZeroArray[candleCount].close = currentClosePrice;
                candlesAfterCandleZeroArray[candleCount].time = currentTime;

                Print("Candle ", candleCount + 1, " recorded: Open=", currentOpenPrice, ", High=", currentHighPrice, ", Low=", currentLowPrice, ", Close=", currentClosePrice);
                candleCount++;

                // Set the flag if this candle closed above the SMA
                anyCandleAboveSMA = true; 
            }
        }
        else
        {
            // If the close price is not above the SMA, reset
            Print("Candle conditions failed (close below SMA), resetting count and Candle Zero flag.");
            isCandleZeroFound = false;  // Reset Candle Zero flag
            candleCount = 0;  // Reset counter
            return; // Exit early if the condition fails
        }
        
        // Check and open a buy on the 5th candle if conditions are met
        if (candleCount >= 5)
        {
            // Set criteria for the last candle in the array
            criteria = (candlesAfterCandleZeroArray[4].close > smaValueCurrent); // Check if the last recorded candle closed above the SMA

            // Open position only if at least one candle closed above the SMA and no bearish open price is below the SMA
            if (anyCandleAboveSMA && canOpenNewBuy && criteria && !IsBearishOpenBelowSMA(currentClosePrice, smaValueCurrent, currentTime)) 
            {
                OpenPosition(ORDER_TYPE_BUY, 0.1, askPrice, "Open Buy Position " + IntegerToString(candleCount) + " candles.");
                canOpenNewBuy = false; // Prevent opening new buys until reset
                Print("Buy position opened after 5 bullish candles.");
            }
            else
            {
                Print("Conditions for opening buy position not met.");
            }
        }
    }
}



// Function to open a position
void OpenPosition(ENUM_ORDER_TYPE orderType, double volume, double price, string comment)
{
    MqlTradeRequest tradeRequest = {};
    MqlTradeResult tradeResult = {};

    tradeRequest.action = TRADE_ACTION_DEAL;
    tradeRequest.symbol = Symbol();
    tradeRequest.volume = volume;
    tradeRequest.type = orderType;
    tradeRequest.price = price;
    tradeRequest.deviation = 10;
    tradeRequest.type_filling = ORDER_FILLING_FOK;
    tradeRequest.comment = comment;

    if (OrderSend(tradeRequest, tradeResult))
    {
        Print(comment, ". Order #", IntegerToString(tradeResult.order));

        // Set Stop Loss (optional)
        ulong positionTicket = 0;
        if (PositionSelect(Symbol()))
        {
            positionTicket = PositionGetInteger(POSITION_TICKET);
            double stopLossPrice = price * 0.998; // 0.2% below opening price for a buy order

            MqlTradeRequest slRequest = {};
            MqlTradeResult slResult = {};

            slRequest.action = TRADE_ACTION_SLTP;
            slRequest.symbol = Symbol();
            slRequest.position = positionTicket;
            slRequest.sl = NormalizeDouble(stopLossPrice, _Digits); // Set Stop Loss
            slRequest.deviation = 10;
            slRequest.type_filling = ORDER_FILLING_FOK;
            slRequest.type_time = ORDER_TIME_GTC;
            slRequest.comment = "Set Stop Loss";

            if (OrderSend(slRequest, slResult))
            {
                Print("Stop Loss set at: ", stopLossPrice);
            }
            else
            {
                Print("Failed to set Stop Loss. Error: ", GetLastError());
            }
        }
        else
        {
            Print("Failed to select position after opening order.");
        }
    }
    else
    {
        Print("Error during ", comment, ": ", GetLastError());
    }
}

// Function to close a position
void ClosePosition(ulong positionTicket)
{
    MqlTradeRequest closeRequest = {};
    MqlTradeResult closeResult = {};

    ENUM_POSITION_TYPE posType = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

    closeRequest.action = TRADE_ACTION_DEAL;
    closeRequest.position = positionTicket;
    closeRequest.symbol = Symbol();
    closeRequest.volume = PositionGetDouble(POSITION_VOLUME);
    closeRequest.type = posType == POSITION_TYPE_BUY ? ORDER_TYPE_SELL : ORDER_TYPE_BUY;
    closeRequest.price = SymbolInfoDouble(Symbol(), posType == POSITION_TYPE_BUY ? SYMBOL_BID : SYMBOL_ASK);
    closeRequest.deviation = 10;
    closeRequest.type_filling = ORDER_FILLING_FOK;
    closeRequest.comment = "Close Position";

    if (OrderSend(closeRequest, closeResult))
    {
        Print("Position closed. Order number: ", closeResult.order);
    }
    else
    {
        Print("Failed to close position. Error code: ", GetLastError());
    }
}


